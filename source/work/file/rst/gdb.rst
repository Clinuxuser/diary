gdb
---

1.概述
~~~~~~

GDB 全称“GNU symbolic debugger”，从名称上不难看出，它诞生于 GNU
计划（同时诞生的还有 GCC、Emacs 等），是 Linux
下常用的程序调试器。发展至今，GDB 已经迭代了诸多个版本，当下的 GDB
支持调试多种编程语言编写的程序，包括
C、C++、Go、Objective-C、OpenCL、Ada 等。实际场景中，GDB 更常用来调试 C
和 C++ 程序。一般来说，GDB主要帮助我们完成以下四个方面的功能：

   1. 启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。
   2. 在某个指定的地方或条件下暂停程序。
   3. 当程序被停住时，可以检查此时你的程序中所发生的事。
   4. 在程序执行过程中修改程序中的变量或条件，将一个bug产生的影响修正从而测试其他bug。

使用GDB调试程序，有以下两点需要注意：

   要使用GDB调试某个程序，该程序编译时必须加上编译选项
   **``-g``**\ ，否则该程序是不包含调试信息的；

..

   GCC编译器支持 **``-O``** 和 **``-g``**
   一起参与编译。GCC编译过程对进行优化的程度可分为5个等级.

分别为 ：

-  **-O/-O0**\ ： 不做任何优化，这是默认的编译选项 ；
-  **-O1**\ ：使用能减少目标文件大小以及执行时间并且不会使编译时间明显增加的优化。
   该模式在编译大型程序的时候会花费更多的时间和内存。在
   -O1下：编译会尝试减少代
   码体积和代码运行时间，但是并不执行会花费大量时间的优化操作。
-  **-O2**\ ：包含
   -O1的优化并增加了不需要在目标文件大小和执行速度上进行折衷的优化。
   GCC执行几乎所有支持的操作但不包括空间和速度之间权衡的优化，编译器不执行循环
   展开以及函数内联。这是推荐的优化等级，除非你有特殊的需求。 -O2会比
   -O1启用多 一些标记。与 -O1比较该优化
   -O2将会花费更多的编译时间当然也会生成性能更好的代 码。
-  **-O3**\ ：打开所有 -O2的优化选项并且增加 -finline-functions,
   -funswitch-loops,-fpredictive-commoning, -fgcse-after-reload and
   -ftree-vectorize优化选项。这是最高最危险
   的优化等级。用这个选项会延长编译代码的时间，并且在使用
   gcc4.x的系统里不应全局 启用。自从 3.x版本以来
   gcc的行为已经有了极大地改变。在 3.x，，-O3生成的代码也只 是比
   -O2快一点点而已，而 gcc4.x中还未必更快。用 -O3来编译所有的
   软件包将产生更
   大体积更耗内存的二进制文件，大大增加编译失败的机会或不可预知的程序行为（包括
   错误）。这样做将得不偿失，记住过犹不及。在 gcc 4.x.中使用
   -O3是不推荐的。
-  **-Os**\ ：专门优化目标文件大小 ,执行所有的不增加目标文件大小的
   -O2优化选项。同时
   -Os还会执行更加优化程序空间的选项。这对于磁盘空间极其紧张或者
   CPU缓存较小的
   机器非常有用。但也可能产生些许问题，因此软件树中的大部分
   ebuild都过滤掉这个等 级的优化。使用 -Os是不推荐的。

2.启用GDB调试
~~~~~~~~~~~~~

GDB调试主要有三种方式：

   1. 直接调试目标程序：gdb ./hello_server
   2. 附加进程id：gdb attach pid
   3. 调试core文件：gdb filename corename

3. 退出GDB
~~~~~~~~~~

-  可以用命令：\ **q（quit的缩写）或者 Ctr + d** 退出GDB。
-  如果GDB attach某个进程，退出GDB之前要用命令 **detach** 解除附加进程

打印变量内存空间

::

   x/nfu addr  

n：代表要打印多少地址

f：指定格式（x16进制，d十进制，o八进制）

u：单位大小指定（b用于字节，h用于半字，w用于全字）

如：x/100xw buf

set max-value-size unlimited 设置打印数据上限
