交叉编译
========

`交叉编译详解 <https://www.crifan.com/files/doc/docbook/cross_compile/release/html/cross_compile.html>`__

什么是交叉编译
--------------

   本地编译：在当前的平台下进行编译（x86的cpu下）,编译出来的可执行文件或库文件，可以直接在当前环境下，即x86的cpu下运行。
   交叉编译：在一种平台上编译放到别的平台上可以运行，即编译环境和运行环境不一致。（英文：cross
   compile）。

工具链和交叉工具链
------------------

什么是工具链
~~~~~~~~~~~~

所谓的工具链，两部分的含义： \* 工具 工具，即tool
，是用来使用的，目标是生成（可运行的）程序或库文件
为了达成此目标，内部执行过程和处理逻辑包含了： \* 1.编译
编译的输入（对象）是：程序代码 编译的输出（目标）是：目标文件
编译所需要的工具是：编译器 编译器：常见的编译器是gcc \* 2.链接
链接的输入（对象）是：（程序运行时所依赖的，或者某个库所依赖的另外一个库）库（文件）
链接的输出（目标）是：程序的可执行程序，或者是可被别人调用的完整的库文件
链接所需要的工具是：连接器 链接器即ld

::

   此处，为了将程序代码，编译成可执行文件，涉及到编译，链接（等其他步骤），要依赖到很多相关的工具，最核心的是编译器gcc，链接器ld。而此处，所谓的工具，主要指的就是：和程序编译链接等相关的gcc，ld等工具

::

   binutils包含了ld等工具
   实际上，上面所说的ld，只是处理操作目标文件，二进制文件的最主要的一个工具

   而和操作目标等文件相关的，还有其他很多工具的：as，objcopy，strip，ar等等工具的

   所以，对此，GNU官网，弄出一个binutils，即binary utils，二进制工具（包），集成了这些，和操作二进制相关的工具集合，叫做binutils

   所以，之后你所见到的，常见的工具，就是那个著名的GNU Binutils了。

   更加详细的解释，参见教程：GNU Binutils详解

-  链 链，即链条，chain
   之所以能称为链，你是说明不止一个东西，然后，按照对应的逻辑，串在一起，链在一起而对应的，涉及到的：

   -  不止一个东西
      指的是就是前面所说的那个工具，即：和程序编译链接等相关的gcc，binutils等工具
   -  按照对应的逻辑 指的就是，按照程序本身编译链接的先后顺序，即：
      先编译，后链接，再进行后期其他的处理等等，比如用objcopy去操作相应的目标文件等等。

如此的，\ **将和程序编译链接等相关的gcc，binutils等工具按照先编译后链接等相关的编译程序的内在逻辑串起来，就成了我们所说的：工具链**

交叉编译链
~~~~~~~~~~

普通所说的，工具链，指的是当前自己的本地平台的工具链。

用于，交叉编译，的工具链，就叫做交叉工具链

即，那些工具，即编译的gcc，链接的ld，以及相关的工具，用于交叉编译的，工具链，叫做交叉工具链。

交叉工具链，很明显，是用来，交叉编译，跨平台的程序所用的。

交叉工具链，和（本地）工具链类似，也是包含了很多的，对应的工具，交叉编译版本的gcc，ld，as等等。

但是，由于其中最最主要的是用于编译的gcc，所以，我们也常把：

交叉工具链，简称为交叉编译器

即：

严格意义上来说，交叉编译器，只是指的是交叉编译版本的gcc

但是实际上为了叫法上的方便，我们常说的交叉编译器，都是指的是交叉工具链

即，常说的交叉编译版本的gcc，比如arm-linux-gcc，实际上指代了，包含一系列交叉编译版本的交叉工具链（arm-linux-gcc，arm-linux-ld，arm-linux-as等等）

而此文中，后面，所说的，如无特殊指明，均用交叉编译器指代交叉工具链。

下面就对交叉编译器，进行详细的解释。 ## 交叉编译简介

交叉编译器的名字的命名规则
~~~~~~~~~~~~~~~~~~~~~~~~~~

**arch-vendor-kernel-system** **arch:即系统架构**

表示交叉编译器，是用于哪个目标系统架构中，用于那个平台中的

即，用此交叉编译器编译出来的程序，是运行在哪种CPU上面的

arch的值，常见的有很多种，比如arm，x86，mips等等。

::

   举例：交叉编译器中的arch的值
   arm-cortex_a8-linux-gnueabi中的arm

   mips-ar2315-linux-gnu中的mips

   powerpc-e500v2-linux-gnuspe中的powerpc

   x86_64-unknown-mingw32中的x86_64

**vendor，即生成厂家，提供商**

表示谁提供的，即谁制作出来这个交叉编译器的。

vendor的值，貌似是可以自己随便填写的。

其他常见写法，还有写成编译交叉编译器的作者的自己的名字的

比如，我叫crifan，那么就可以写成crifan，然后生成的交叉编译器，就是xxx-crifan-xxx-xxx了。

**kernel，直译为，内核**
其实指的是，你用此交叉编译器，编译出来的程序，所运行的目标系统

即，此交叉编译器，编译出来的程序，在什么系统中，什么环境中，运行。

而对应的环境或系统，主要有两种：

-  Linux 表示：有OS（此处主要指的是Linux）操作系统的环境

   比如，我用交叉编译器，编译一个helloworld程序，然后下载到嵌入式开发中的嵌入式Linux中运行，

   就属于，用此交叉编译器，编译出来的程序，是要运行于，带OS，即嵌入式Linux系统，环境中的

   此处，简称为，有OS的目标系统：Linux

-  bare-metal bare-metal，直译为：裸金属

   表示：无（此处主要指的是Linux）操作系统的环境，

   比如，用此交叉编译器，去编译一个Uboot，或者是其他一个小程序，是运行在，无嵌入式Linux的时候，单独运行的一个程序。

   比如，你购买的嵌入式系统开发版，常常附带一些小程序，比如点亮LED，跑马灯等程序，就是这种，运行在无OS的环境的

   此处，简称为：无OS系统的：bare-metal

**system，直译为，系统**
其实主要表示的，交叉编译器所选择的库函数和目标系统

最常见的一些值有，gnu，gnueabi，uclibc等等。

-  gnu 等价于：glibc+oabi

-  gnueabi 等价于：glibc+eabi

-  uclibc 等价于：uclibc+oabi（待确认） ### 如何获取交叉编译器 ####
   拿来主义 直接去下载和使用别人已经编译好的交叉编译器
   `linaro <https://www.linaro.org/downloads/>`__
   `launchpad <https://launchpad.net/linaro-toolchain-binaries/+milestone/2013.07>`__
   #### 自己动手，丰衣足食 自己去编译出来一套自己想要的交叉编译器 #####
   白手起家从头开始制作交叉编译器 难度等级：10级 #####
   借助别人的工具去制作交叉编译器 难度等级：6级 ###
   制作交叉编译的各种工具
   对于，制作交叉编译器这样的事情，本身是很需要技术含量，和很耗时的事情

所以，对此，现在现存很多相关的工具，以简化制作交叉编译器这个事情的复杂度，帮你节省很多精力和时间

而你所要做的事情就只是：

了解有哪些工具，选个合适的工具，搞懂如何使用，用其制作出你所需要的交叉编译器，即可。

/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr为工具库的安装目录
/root/arm_linux_compile_tool为交叉编译的工具链

使用交叉编译工具示例
~~~~~~~~~~~~~~~~~~~~

`下载gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz <https://releases.linaro.org/components/toolchain/binaries/7.5-2019.12/aarch64-linux-gnu/>`__

::

   将交叉编译工具链放入路径：/root/arm_linux_compile_tool
   解压：tar -xvf gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar
   修改环境变量：vim ~/.bashrc
   增加：export PATH=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH
   生效环境变量：source ~/.bashrc
   查看：aarch64-linux-gnu-gcc -v
   编译使用：aarch64-linux-gnu-gcc

编译交叉编译
~~~~~~~~~~~~

`参考 <https://zhuanlan.zhihu.com/p/580885743>`__ ##### 1.NUMA库

::

   yum install  autoconf automake libtool
   git clone https://github.com/numactl/numactl.git
   cd numactl
   git checkout v2.0.13 -b v2.0.13
   ./autogen.sh
   autoconf -i
   ./configure --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr
   make;make install

用NUMA支持扩充GNU工具链 复制NUMA头文件和lib到交叉编译器的目录

::

   #cp /root/local/include/numa.h /root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr/include/
   #cp /root/local/lib/libnuma.so  /root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/lib/gcc/aarch64-linux-gnu/7.5.0/
   #cp /root/local/lib/libnuma.a  /root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/lib/gcc/aarch64-linux-gnu/7.5.0/

2.使用Meson GNU工具链交叉编译DPDK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

   vim ~/.bashrc
   export PKG_CONFIG_PATH=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr/lib/pkgconfig/
   并修改libdpdk-libs.pc和libdpdk.pc中的prefix路径为:/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr/文件

   meson aarch64-build-gcc --cross-file config/arm/arm64_armv8_linux_gcc
   cd ninja
   ninja -j8
   meson install --destdir /root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr

3.编译cJSON库
^^^^^^^^^^^^^

::

   cJSON库路径：https://github.com/DaveGamble/cJSON
   mkdir build
   cd build
   CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ cmake .. -DCMAKE_INSTALL_PREFIX=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr

4.编译openssl
^^^^^^^^^^^^^

::

   下载路径:
   https://github.com/openssl/openssl/tree/openssl-3.3.0-beta1?tab=readme-ov-file
   参考：https://github.com/openssl/openssl/blob/openssl-3.3.0-beta1/NOTES-UNIX.md

   ./config no-asm shared no-async --prefix=/root/libs/openssl --cross-compile-prefix=aarch64-linux-gnu-
   # ./config no-asm shared no-async --prefix=$(pwd)/install --cross-compile-prefix=arm-linux-

   no-asm:  在交叉编译过程中不使用汇编代码代码加速编译过程；
   shared: 生成动态连接库。
   no-async: 交叉编译工具链没有提供GNU C的ucontext库
   --prefix=: 安装路径
   --cross-compile-prefix=: 交叉编译工具

   vim Makefile
   打开Makefile,删除里面所有的-m64和-m32编译选项

   make; make install

./config no-asm shared no-async –cross-compile-prefix=arm-linux-

5.编译cyrus-sasl2
^^^^^^^^^^^^^^^^^

下载cyrus-sasl2 路径: https://github.com/cyrusimap/cyrus-sasl/releases
https://www.cyrusimap.org/sasl/sasl/developer/installation.html

::

   ./autogen.sh
   ./configure --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr

6.编译librdkafka
^^^^^^^^^^^^^^^^

::

   //export CXXFLAGS=-I/data/work/openssl_instasll/include
   //export LDFLAGS=-L/data/work/openssl_instasll/lib



   ./configure  --arch=aarch64 --cc=aarch64-linux-gnu-gcc --cxx=aarch64-linux-gnu-g++ --enable-gssapi

libtool
^^^^^^^

`参考路径 <https://www.gnu.org/software/libtool/>`__

::

   ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ 

libyaml
^^^^^^^

`参考连接 <https://pyyaml.org/wiki/LibYAML>`__
`下载连接 <https://github.com/yaml/libyaml/tree/release/0.2.5>`__

::

   ./bootstrap
   ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ 
   make -j8
   make install

m4 和bison和flex不用交叉编译
libpci用了bin文件，如果是交叉编译，则无法使用bin文件libpcap无法编译通过
#### m4 `参考连接 <https://ftp.gnu.org/gnu/m4/>`__ m4-1.4.19

::

   ./configure
   make -j8;make install
   # ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ 

bison
^^^^^

`参考连接 <https://ftp.gnu.org/gnu/bison/>`__ bison-3.7.6

::

   # ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ 
   ./configure
   make -j8;make install

flex
^^^^

`参考连接 <https://github.com/westes/flex/releases>`__ flex-2.6.4

::

   # ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ 
   ./configure
   make -j8;make install

libpcai
^^^^^^^

`参考连接 <https://www.tcpdump.org/>`__

::

   CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ cmake .. -DCMAKE_INSTALL_PREFIX=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr 

   ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++  --with-pcap=linux
   make -j8;make install

jansson
^^^^^^^

`参考连接 <https://pyyaml.org/wiki/LibYAML>`__

::

   ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ 
   make -j8
   make install

gettext-devel
^^^^^^^^^^^^^

`参考连接 <https://www.gnu.org/software/gettext/>`__
`下载连接 <https://ftp.gnu.org/pub/gnu/gettext/gettext-0.22.5.tar.gz>`__

::

   tar -zxvf gettext-0.20.1.tar.gz
   cd gettext-0.20.1
   ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ CFLAGS="-fPIC"
   make -j8
   sudo make install

安装rust
^^^^^^^^

首先安装一个rustup

::

   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

打开bash_profile

::

   vim ~/.bash_profile

添加一行

::

   export PATH="$HOME/.cargo/bin:$PATH"

::

   curl -L https://static.rust-lang.org/rustup.sh| sudo sh
   重进xshell 或者 source ~/.cargo/env
   cargo install --force cbindgen

   cd .cargo/
   vim config.toml
   添加
   [target.aarch64-unknown-linux-gnu]
   linker = "aarch64-linux-gnu-gcc"




   cargo install --force cbindgen
   cargo install --target aarch64-unknown-linux-gnu --force cbindgen

以下是rust的交叉编译(不需要) > 查看支持的架构版本 rustup target list
这里使用aarch64-unknown-linux-gnu 再次安装rust curl –proto ‘=https’
–tlsv1.2 -sSf https://sh.rustup.rs \| sh 输入2
输入aarch64-unknown-linux-gnu 一路回车直到进入安装页面按1安装arm架构
查看当前rust的版本: rustup show

zlib
^^^^

`参考路径 <https://zlib.net/>`__

::

   ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --shared --static
   vim Makefile
   将CC=gcc 修改为CC=aarch64-linux-gnu-gcc
   make -j8 ;make install

libhtp
^^^^^^

::

   cd nsps/libhtp


   ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ 

pcre2
^^^^^

`下载路径 <https://github.com/PCRE2Project/pcre2/releases>`__
`参考路径 <https://blog.csdn.net/sdwujk160507140150/article/details/123547833>`__

::

   ./configure --prefix=/root/arm_linux_compile_tool/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ 
   make -j8
   make install

suricata
^^^^^^^^

::

   ./configure --enable-dpdk --enable-pos  --host=aarch64-linux-gnu CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ 
